{"ast":null,"code":"/*\n能发送异步ajax请求的函数模块\n封装axios库\n函数的返回值是promise对象\n1. 优化1: 统一处理请求异常?\n    在外层包一个自己创建的promise对象\n    在请求出错时, 不reject(error), 而是显示错误提示\n2. 优化2: 异步得到不是reponse, 而是response.data\n   在请求成功resolve时: resolve(response.data)\n */\nimport axios from 'axios';\nimport { message } from 'antd';\nexport default function ajax(url, data = {}, type = 'GET') {\n  return new Promise((resolve, reject) => {\n    let promise; // 1. 执行异步ajax请求\n\n    if (type === 'GET') {\n      // 发GET请求\n      promise = axios.get(url, {\n        // 配置对象\n        params: data // 指定请求参数\n\n      });\n    } else {\n      // 发POST请求\n      promise = axios.post(url, data);\n    } // 2. 如果成功了, 调用resolve(value)\n\n\n    promise.then(response => {\n      resolve(response.data); // 3. 如果失败了, 不调用reject(reason), 而是提示异常信息\n    }).catch(error => {\n      // reject(error)\n      message.error('请求出错了: ' + error.message);\n    });\n  });\n}","map":{"version":3,"sources":["/Users/wangbing/Desktop/cz/src/api/ajax.js"],"names":["axios","message","ajax","url","data","type","Promise","resolve","reject","promise","get","params","post","then","response","catch","error"],"mappings":"AAAA;;;;;;;;;;AAWA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,MAAxB;AAEA,eAAe,SAASC,IAAT,CAAcC,GAAd,EAAmBC,IAAI,GAAG,EAA1B,EAA8BC,IAAI,GAAG,KAArC,EAA4C;AAEvD,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpC,QAAIC,OAAJ,CADoC,CAEpC;;AACA,QAAIJ,IAAI,KAAK,KAAb,EAAoB;AAAE;AAClBI,MAAAA,OAAO,GAAGT,KAAK,CAACU,GAAN,CAAUP,GAAV,EAAe;AAAE;AACvBQ,QAAAA,MAAM,EAAEP,IADa,CACR;;AADQ,OAAf,CAAV;AAGH,KAJD,MAIO;AAAE;AACLK,MAAAA,OAAO,GAAGT,KAAK,CAACY,IAAN,CAAWT,GAAX,EAAgBC,IAAhB,CAAV;AACH,KATmC,CAUpC;;;AACAK,IAAAA,OAAO,CAACI,IAAR,CAAaC,QAAQ,IAAI;AACrBP,MAAAA,OAAO,CAACO,QAAQ,CAACV,IAAV,CAAP,CADqB,CAErB;AACH,KAHD,EAGGW,KAHH,CAGSC,KAAK,IAAI;AACd;AACAf,MAAAA,OAAO,CAACe,KAAR,CAAc,YAAYA,KAAK,CAACf,OAAhC;AACH,KAND;AAOH,GAlBM,CAAP;AAoBH","sourcesContent":["/*\n能发送异步ajax请求的函数模块\n封装axios库\n函数的返回值是promise对象\n1. 优化1: 统一处理请求异常?\n    在外层包一个自己创建的promise对象\n    在请求出错时, 不reject(error), 而是显示错误提示\n2. 优化2: 异步得到不是reponse, 而是response.data\n   在请求成功resolve时: resolve(response.data)\n */\n\nimport axios from 'axios'\nimport { message } from 'antd'\n\nexport default function ajax(url, data = {}, type = 'GET') {\n\n    return new Promise((resolve, reject) => {\n        let promise\n        // 1. 执行异步ajax请求\n        if (type === 'GET') { // 发GET请求\n            promise = axios.get(url, { // 配置对象\n                params: data // 指定请求参数\n            })\n        } else { // 发POST请求\n            promise = axios.post(url, data)\n        }\n        // 2. 如果成功了, 调用resolve(value)\n        promise.then(response => {\n            resolve(response.data)\n            // 3. 如果失败了, 不调用reject(reason), 而是提示异常信息\n        }).catch(error => {\n            // reject(error)\n            message.error('请求出错了: ' + error.message)\n        })\n    })\n\n}\n\n"]},"metadata":{},"sourceType":"module"}