{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"@babel/runtime/helpers/esm/createSuper\"; // TODO: https://www.w3.org/TR/2017/NOTE-wai-aria-practices-1.1-20171214/examples/treeview/treeview-2/treeview-2a.html\n// Fully accessibility support\n\nimport * as React from 'react';\nimport KeyCode from \"rc-util/es/KeyCode\";\nimport warning from \"rc-util/es/warning\";\nimport classNames from 'classnames';\nimport { TreeContext } from './contextTypes';\nimport { getDataAndAria, getDragNodesKeys, parseCheckedKeys, conductExpandParent, calcSelectedKeys, calcDropPosition, arrAdd, arrDel, posToArr } from './util';\nimport { flattenTreeData, convertTreeToData, convertDataToEntities, warningWithoutKey, convertNodePropsToEventData, getTreeNodeProps } from './utils/treeUtil';\nimport NodeList, { MOTION_KEY, MotionEntity } from './NodeList';\nimport TreeNode from './TreeNode';\nimport { conductCheck } from './utils/conductUtil';\n\nvar Tree = /*#__PURE__*/function (_React$Component) {\n  _inherits(Tree, _React$Component);\n\n  var _super = _createSuper(Tree);\n\n  function Tree() {\n    var _this;\n\n    _classCallCheck(this, Tree);\n\n    _this = _super.apply(this, arguments);\n    _this.state = {\n      keyEntities: {},\n      selectedKeys: [],\n      checkedKeys: [],\n      halfCheckedKeys: [],\n      loadedKeys: [],\n      loadingKeys: [],\n      expandedKeys: [],\n      dragging: false,\n      dragNodesKeys: [],\n      dragOverNodeKey: null,\n      dropPosition: null,\n      treeData: [],\n      flattenNodes: [],\n      focused: false,\n      activeKey: null,\n      listChanging: false,\n      prevProps: null\n    };\n    _this.listRef = React.createRef();\n\n    _this.onNodeDragStart = function (event, node) {\n      var _this$state = _this.state,\n          expandedKeys = _this$state.expandedKeys,\n          keyEntities = _this$state.keyEntities;\n      var onDragStart = _this.props.onDragStart;\n      var eventKey = node.props.eventKey;\n      _this.dragNode = node;\n      var newExpandedKeys = arrDel(expandedKeys, eventKey);\n\n      _this.setState({\n        dragging: true,\n        dragNodesKeys: getDragNodesKeys(eventKey, keyEntities)\n      });\n\n      _this.setExpandedKeys(newExpandedKeys);\n\n      if (onDragStart) {\n        onDragStart({\n          event: event,\n          node: convertNodePropsToEventData(node.props)\n        });\n      }\n    };\n    /**\n     * [Legacy] Select handler is less small than node,\n     * so that this will trigger when drag enter node or select handler.\n     * This is a little tricky if customize css without padding.\n     * Better for use mouse move event to refresh drag state.\n     * But let's just keep it to avoid event trigger logic change.\n     */\n\n\n    _this.onNodeDragEnter = function (event, node) {\n      var _this$state2 = _this.state,\n          expandedKeys = _this$state2.expandedKeys,\n          keyEntities = _this$state2.keyEntities,\n          dragNodesKeys = _this$state2.dragNodesKeys;\n      var onDragEnter = _this.props.onDragEnter;\n      var _node$props = node.props,\n          pos = _node$props.pos,\n          eventKey = _node$props.eventKey;\n      if (!_this.dragNode || dragNodesKeys.indexOf(eventKey) !== -1) return;\n      var dropPosition = calcDropPosition(event, node); // Skip if drag node is self\n\n      if (_this.dragNode.props.eventKey === eventKey && dropPosition === 0) {\n        _this.setState({\n          dragOverNodeKey: '',\n          dropPosition: null\n        });\n\n        return;\n      } // Ref: https://github.com/react-component/tree/issues/132\n      // Add timeout to let onDragLevel fire before onDragEnter,\n      // so that we can clean drag props for onDragLeave node.\n      // Macro task for this:\n      // https://html.spec.whatwg.org/multipage/webappapis.html#clean-up-after-running-script\n\n\n      setTimeout(function () {\n        // Update drag over node\n        _this.setState({\n          dragOverNodeKey: eventKey,\n          dropPosition: dropPosition\n        }); // Side effect for delay drag\n\n\n        if (!_this.delayedDragEnterLogic) {\n          _this.delayedDragEnterLogic = {};\n        }\n\n        Object.keys(_this.delayedDragEnterLogic).forEach(function (key) {\n          clearTimeout(_this.delayedDragEnterLogic[key]);\n        });\n        _this.delayedDragEnterLogic[pos] = window.setTimeout(function () {\n          if (!_this.state.dragging) return;\n\n          var newExpandedKeys = _toConsumableArray(expandedKeys);\n\n          var entity = keyEntities[eventKey];\n\n          if (entity && (entity.children || []).length) {\n            newExpandedKeys = arrAdd(expandedKeys, eventKey);\n          }\n\n          if (!('expandedKeys' in _this.props)) {\n            _this.setExpandedKeys(newExpandedKeys);\n          }\n\n          if (onDragEnter) {\n            onDragEnter({\n              event: event,\n              node: convertNodePropsToEventData(node.props),\n              expandedKeys: newExpandedKeys\n            });\n          }\n        }, 400);\n      }, 0);\n    };\n\n    _this.onNodeDragOver = function (event, node) {\n      var dragNodesKeys = _this.state.dragNodesKeys;\n      var onDragOver = _this.props.onDragOver;\n      var eventKey = node.props.eventKey;\n\n      if (dragNodesKeys.indexOf(eventKey) !== -1) {\n        return;\n      } // Update drag position\n\n\n      if (_this.dragNode && eventKey === _this.state.dragOverNodeKey) {\n        var dropPosition = calcDropPosition(event, node);\n        if (dropPosition === _this.state.dropPosition) return;\n\n        _this.setState({\n          dropPosition: dropPosition\n        });\n      }\n\n      if (onDragOver) {\n        onDragOver({\n          event: event,\n          node: convertNodePropsToEventData(node.props)\n        });\n      }\n    };\n\n    _this.onNodeDragLeave = function (event, node) {\n      var onDragLeave = _this.props.onDragLeave;\n\n      _this.setState({\n        dragOverNodeKey: ''\n      });\n\n      if (onDragLeave) {\n        onDragLeave({\n          event: event,\n          node: convertNodePropsToEventData(node.props)\n        });\n      }\n    };\n\n    _this.onNodeDragEnd = function (event, node) {\n      var onDragEnd = _this.props.onDragEnd;\n\n      _this.setState({\n        dragOverNodeKey: ''\n      });\n\n      _this.cleanDragState();\n\n      if (onDragEnd) {\n        onDragEnd({\n          event: event,\n          node: convertNodePropsToEventData(node.props)\n        });\n      }\n\n      _this.dragNode = null;\n    };\n\n    _this.onNodeDrop = function (event, node) {\n      var _this$state3 = _this.state,\n          _this$state3$dragNode = _this$state3.dragNodesKeys,\n          dragNodesKeys = _this$state3$dragNode === void 0 ? [] : _this$state3$dragNode,\n          dropPosition = _this$state3.dropPosition;\n      var onDrop = _this.props.onDrop;\n      var _node$props2 = node.props,\n          eventKey = _node$props2.eventKey,\n          pos = _node$props2.pos;\n\n      _this.setState({\n        dragOverNodeKey: ''\n      });\n\n      _this.cleanDragState();\n\n      if (dragNodesKeys.indexOf(eventKey) !== -1) {\n        warning(false, \"Can not drop to dragNode(include it's children node)\");\n        return;\n      }\n\n      var posArr = posToArr(pos);\n      var dropResult = {\n        event: event,\n        node: convertNodePropsToEventData(node.props),\n        dragNode: _this.dragNode ? convertNodePropsToEventData(_this.dragNode.props) : null,\n        dragNodesKeys: dragNodesKeys.slice(),\n        dropPosition: dropPosition + Number(posArr[posArr.length - 1]),\n        dropToGap: false\n      };\n\n      if (dropPosition !== 0) {\n        dropResult.dropToGap = true;\n      }\n\n      if (onDrop) {\n        onDrop(dropResult);\n      }\n\n      _this.dragNode = null;\n    };\n\n    _this.cleanDragState = function () {\n      var dragging = _this.state.dragging;\n\n      if (dragging) {\n        _this.setState({\n          dragging: false\n        });\n      }\n    };\n\n    _this.onNodeClick = function (e, treeNode) {\n      var onClick = _this.props.onClick;\n\n      if (onClick) {\n        onClick(e, treeNode);\n      }\n    };\n\n    _this.onNodeDoubleClick = function (e, treeNode) {\n      var onDoubleClick = _this.props.onDoubleClick;\n\n      if (onDoubleClick) {\n        onDoubleClick(e, treeNode);\n      }\n    };\n\n    _this.onNodeSelect = function (e, treeNode) {\n      var selectedKeys = _this.state.selectedKeys;\n      var keyEntities = _this.state.keyEntities;\n      var _this$props = _this.props,\n          onSelect = _this$props.onSelect,\n          multiple = _this$props.multiple;\n      var selected = treeNode.selected,\n          key = treeNode.key;\n      var targetSelected = !selected; // Update selected keys\n\n      if (!targetSelected) {\n        selectedKeys = arrDel(selectedKeys, key);\n      } else if (!multiple) {\n        selectedKeys = [key];\n      } else {\n        selectedKeys = arrAdd(selectedKeys, key);\n      } // [Legacy] Not found related usage in doc or upper libs\n\n\n      var selectedNodes = selectedKeys.map(function (selectedKey) {\n        var entity = keyEntities[selectedKey];\n        if (!entity) return null;\n        return entity.node;\n      }).filter(function (node) {\n        return node;\n      });\n\n      _this.setUncontrolledState({\n        selectedKeys: selectedKeys\n      });\n\n      if (onSelect) {\n        onSelect(selectedKeys, {\n          event: 'select',\n          selected: targetSelected,\n          node: treeNode,\n          selectedNodes: selectedNodes,\n          nativeEvent: e.nativeEvent\n        });\n      }\n    };\n\n    _this.onNodeCheck = function (e, treeNode, checked) {\n      var _this$state4 = _this.state,\n          keyEntities = _this$state4.keyEntities,\n          oriCheckedKeys = _this$state4.checkedKeys,\n          oriHalfCheckedKeys = _this$state4.halfCheckedKeys;\n      var _this$props2 = _this.props,\n          checkStrictly = _this$props2.checkStrictly,\n          onCheck = _this$props2.onCheck;\n      var key = treeNode.key; // Prepare trigger arguments\n\n      var checkedObj;\n      var eventObj = {\n        event: 'check',\n        node: treeNode,\n        checked: checked,\n        nativeEvent: e.nativeEvent\n      };\n\n      if (checkStrictly) {\n        var checkedKeys = checked ? arrAdd(oriCheckedKeys, key) : arrDel(oriCheckedKeys, key);\n        var halfCheckedKeys = arrDel(oriHalfCheckedKeys, key);\n        checkedObj = {\n          checked: checkedKeys,\n          halfChecked: halfCheckedKeys\n        };\n        eventObj.checkedNodes = checkedKeys.map(function (checkedKey) {\n          return keyEntities[checkedKey];\n        }).filter(function (entity) {\n          return entity;\n        }).map(function (entity) {\n          return entity.node;\n        });\n\n        _this.setUncontrolledState({\n          checkedKeys: checkedKeys\n        });\n      } else {\n        // Always fill first\n        var _conductCheck = conductCheck([].concat(_toConsumableArray(oriCheckedKeys), [key]), true, keyEntities),\n            _checkedKeys = _conductCheck.checkedKeys,\n            _halfCheckedKeys = _conductCheck.halfCheckedKeys; // If remove, we do it again to correction\n\n\n        if (!checked) {\n          var keySet = new Set(_checkedKeys);\n          keySet.delete(key);\n\n          var _conductCheck2 = conductCheck(Array.from(keySet), {\n            checked: false,\n            halfCheckedKeys: _halfCheckedKeys\n          }, keyEntities);\n\n          _checkedKeys = _conductCheck2.checkedKeys;\n          _halfCheckedKeys = _conductCheck2.halfCheckedKeys;\n        }\n\n        checkedObj = _checkedKeys; // [Legacy] This is used for `rc-tree-select`\n\n        eventObj.checkedNodes = [];\n        eventObj.checkedNodesPositions = [];\n        eventObj.halfCheckedKeys = _halfCheckedKeys;\n\n        _checkedKeys.forEach(function (checkedKey) {\n          var entity = keyEntities[checkedKey];\n          if (!entity) return;\n          var node = entity.node,\n              pos = entity.pos;\n          eventObj.checkedNodes.push(node);\n          eventObj.checkedNodesPositions.push({\n            node: node,\n            pos: pos\n          });\n        });\n\n        _this.setUncontrolledState({\n          checkedKeys: _checkedKeys\n        }, false, {\n          halfCheckedKeys: _halfCheckedKeys\n        });\n      }\n\n      if (onCheck) {\n        onCheck(checkedObj, eventObj);\n      }\n    };\n\n    _this.onNodeLoad = function (treeNode) {\n      return new Promise(function (resolve) {\n        // We need to get the latest state of loading/loaded keys\n        _this.setState(function (_ref) {\n          var _ref$loadedKeys = _ref.loadedKeys,\n              loadedKeys = _ref$loadedKeys === void 0 ? [] : _ref$loadedKeys,\n              _ref$loadingKeys = _ref.loadingKeys,\n              loadingKeys = _ref$loadingKeys === void 0 ? [] : _ref$loadingKeys;\n          var _this$props3 = _this.props,\n              loadData = _this$props3.loadData,\n              onLoad = _this$props3.onLoad;\n          var key = treeNode.key;\n\n          if (!loadData || loadedKeys.indexOf(key) !== -1 || loadingKeys.indexOf(key) !== -1) {\n            // react 15 will warn if return null\n            return {};\n          } // Process load data\n\n\n          var promise = loadData(treeNode);\n          promise.then(function () {\n            var _this$state5 = _this.state,\n                currentLoadedKeys = _this$state5.loadedKeys,\n                currentLoadingKeys = _this$state5.loadingKeys;\n            var newLoadedKeys = arrAdd(currentLoadedKeys, key);\n            var newLoadingKeys = arrDel(currentLoadingKeys, key); // onLoad should trigger before internal setState to avoid `loadData` trigger twice.\n            // https://github.com/ant-design/ant-design/issues/12464\n\n            if (onLoad) {\n              onLoad(newLoadedKeys, {\n                event: 'load',\n                node: treeNode\n              });\n            }\n\n            _this.setUncontrolledState({\n              loadedKeys: newLoadedKeys\n            });\n\n            _this.setState({\n              loadingKeys: newLoadingKeys\n            });\n\n            resolve();\n          });\n          return {\n            loadingKeys: arrAdd(loadingKeys, key)\n          };\n        });\n      });\n    };\n\n    _this.onNodeMouseEnter = function (event, node) {\n      var onMouseEnter = _this.props.onMouseEnter;\n\n      if (onMouseEnter) {\n        onMouseEnter({\n          event: event,\n          node: node\n        });\n      }\n    };\n\n    _this.onNodeMouseLeave = function (event, node) {\n      var onMouseLeave = _this.props.onMouseLeave;\n\n      if (onMouseLeave) {\n        onMouseLeave({\n          event: event,\n          node: node\n        });\n      }\n    };\n\n    _this.onNodeContextMenu = function (event, node) {\n      var onRightClick = _this.props.onRightClick;\n\n      if (onRightClick) {\n        event.preventDefault();\n        onRightClick({\n          event: event,\n          node: node\n        });\n      }\n    };\n\n    _this.onFocus = function () {\n      var onFocus = _this.props.onFocus;\n\n      _this.setState({\n        focused: true\n      });\n\n      if (onFocus) {\n        onFocus.apply(void 0, arguments);\n      }\n    };\n\n    _this.onBlur = function () {\n      var onBlur = _this.props.onBlur;\n\n      _this.setState({\n        focused: false\n      });\n\n      _this.onActiveChange(null);\n\n      if (onBlur) {\n        onBlur.apply(void 0, arguments);\n      }\n    };\n\n    _this.getTreeNodeRequiredProps = function () {\n      var _this$state6 = _this.state,\n          expandedKeys = _this$state6.expandedKeys,\n          selectedKeys = _this$state6.selectedKeys,\n          loadedKeys = _this$state6.loadedKeys,\n          loadingKeys = _this$state6.loadingKeys,\n          checkedKeys = _this$state6.checkedKeys,\n          halfCheckedKeys = _this$state6.halfCheckedKeys,\n          dragOverNodeKey = _this$state6.dragOverNodeKey,\n          dropPosition = _this$state6.dropPosition,\n          keyEntities = _this$state6.keyEntities;\n      return {\n        expandedKeys: expandedKeys || [],\n        selectedKeys: selectedKeys || [],\n        loadedKeys: loadedKeys || [],\n        loadingKeys: loadingKeys || [],\n        checkedKeys: checkedKeys || [],\n        halfCheckedKeys: halfCheckedKeys || [],\n        dragOverNodeKey: dragOverNodeKey,\n        dropPosition: dropPosition,\n        keyEntities: keyEntities\n      };\n    }; // =========================== Expanded ===========================\n\n    /** Set uncontrolled `expandedKeys`. This will also auto update `flattenNodes`. */\n\n\n    _this.setExpandedKeys = function (expandedKeys) {\n      var treeData = _this.state.treeData;\n      var flattenNodes = flattenTreeData(treeData, expandedKeys);\n\n      _this.setUncontrolledState({\n        expandedKeys: expandedKeys,\n        flattenNodes: flattenNodes\n      }, true);\n    };\n\n    _this.onNodeExpand = function (e, treeNode) {\n      var expandedKeys = _this.state.expandedKeys;\n      var listChanging = _this.state.listChanging;\n      var _this$props4 = _this.props,\n          onExpand = _this$props4.onExpand,\n          loadData = _this$props4.loadData;\n      var key = treeNode.key,\n          expanded = treeNode.expanded; // Do nothing when motion is in progress\n\n      if (listChanging) {\n        return;\n      } // Update selected keys\n\n\n      var index = expandedKeys.indexOf(key);\n      var targetExpanded = !expanded;\n      warning(expanded && index !== -1 || !expanded && index === -1, 'Expand state not sync with index check');\n\n      if (targetExpanded) {\n        expandedKeys = arrAdd(expandedKeys, key);\n      } else {\n        expandedKeys = arrDel(expandedKeys, key);\n      }\n\n      _this.setExpandedKeys(expandedKeys);\n\n      if (onExpand) {\n        onExpand(expandedKeys, {\n          node: treeNode,\n          expanded: targetExpanded,\n          nativeEvent: e.nativeEvent\n        });\n      } // Async Load data\n\n\n      if (targetExpanded && loadData) {\n        var loadPromise = _this.onNodeLoad(treeNode);\n\n        if (loadPromise) {\n          loadPromise.then(function () {\n            // [Legacy] Refresh logic\n            var newFlattenTreeData = flattenTreeData(_this.state.treeData, expandedKeys);\n\n            _this.setUncontrolledState({\n              flattenNodes: newFlattenTreeData\n            });\n          });\n        }\n      }\n    };\n\n    _this.onListChangeStart = function () {\n      _this.setUncontrolledState({\n        listChanging: true\n      });\n    };\n\n    _this.onListChangeEnd = function () {\n      setTimeout(function () {\n        _this.setUncontrolledState({\n          listChanging: false\n        });\n      });\n    }; // =========================== Keyboard ===========================\n\n\n    _this.onActiveChange = function (newActiveKey) {\n      var activeKey = _this.state.activeKey;\n      var onActiveChange = _this.props.onActiveChange;\n\n      if (activeKey === newActiveKey) {\n        return;\n      }\n\n      _this.setState({\n        activeKey: newActiveKey\n      });\n\n      if (newActiveKey !== null) {\n        _this.scrollTo({\n          key: newActiveKey\n        });\n      }\n\n      if (onActiveChange) {\n        onActiveChange(newActiveKey);\n      }\n    };\n\n    _this.getActiveItem = function () {\n      var _this$state7 = _this.state,\n          activeKey = _this$state7.activeKey,\n          flattenNodes = _this$state7.flattenNodes;\n\n      if (activeKey === null) {\n        return null;\n      }\n\n      return flattenNodes.find(function (_ref2) {\n        var key = _ref2.data.key;\n        return key === activeKey;\n      }) || null;\n    };\n\n    _this.offsetActiveKey = function (offset) {\n      var _this$state8 = _this.state,\n          flattenNodes = _this$state8.flattenNodes,\n          activeKey = _this$state8.activeKey;\n      var index = flattenNodes.findIndex(function (_ref3) {\n        var key = _ref3.data.key;\n        return key === activeKey;\n      }); // Align with index\n\n      if (index === -1 && offset < 0) {\n        index = flattenNodes.length;\n      }\n\n      index = (index + offset + flattenNodes.length) % flattenNodes.length;\n      var item = flattenNodes[index];\n\n      if (item) {\n        var key = item.data.key;\n\n        _this.onActiveChange(key);\n      } else {\n        _this.onActiveChange(null);\n      }\n    };\n\n    _this.onKeyDown = function (event) {\n      var _this$state9 = _this.state,\n          activeKey = _this$state9.activeKey,\n          expandedKeys = _this$state9.expandedKeys,\n          checkedKeys = _this$state9.checkedKeys;\n      var _this$props5 = _this.props,\n          onKeyDown = _this$props5.onKeyDown,\n          checkable = _this$props5.checkable,\n          selectable = _this$props5.selectable; // >>>>>>>>>> Direction\n\n      switch (event.which) {\n        case KeyCode.UP:\n          {\n            _this.offsetActiveKey(-1);\n\n            event.preventDefault();\n            break;\n          }\n\n        case KeyCode.DOWN:\n          {\n            _this.offsetActiveKey(1);\n\n            event.preventDefault();\n            break;\n          }\n      } // >>>>>>>>>> Expand & Selection\n\n\n      var activeItem = _this.getActiveItem();\n\n      if (activeItem && activeItem.data) {\n        var treeNodeRequiredProps = _this.getTreeNodeRequiredProps();\n\n        var expandable = activeItem.data.isLeaf === false || !!(activeItem.data.children || []).length;\n        var eventNode = convertNodePropsToEventData(_objectSpread(_objectSpread({}, getTreeNodeProps(activeKey, treeNodeRequiredProps)), {}, {\n          data: activeItem.data,\n          active: true\n        }));\n\n        switch (event.which) {\n          // >>> Expand\n          case KeyCode.LEFT:\n            {\n              // Collapse if possible\n              if (expandable && expandedKeys.includes(activeKey)) {\n                _this.onNodeExpand({}, eventNode);\n              } else if (activeItem.parent) {\n                _this.onActiveChange(activeItem.parent.data.key);\n              }\n\n              event.preventDefault();\n              break;\n            }\n\n          case KeyCode.RIGHT:\n            {\n              // Expand if possible\n              if (expandable && !expandedKeys.includes(activeKey)) {\n                _this.onNodeExpand({}, eventNode);\n              } else if (activeItem.children && activeItem.children.length) {\n                _this.onActiveChange(activeItem.children[0].data.key);\n              }\n\n              event.preventDefault();\n              break;\n            }\n          // Selection\n\n          case KeyCode.ENTER:\n          case KeyCode.SPACE:\n            {\n              if (checkable && !eventNode.disabled && eventNode.checkable !== false && !eventNode.disableCheckbox) {\n                _this.onNodeCheck({}, eventNode, !checkedKeys.includes(activeKey));\n              } else if (!checkable && selectable && !eventNode.disabled && eventNode.selectable !== false) {\n                _this.onNodeSelect({}, eventNode);\n              }\n\n              break;\n            }\n        }\n      }\n\n      if (onKeyDown) {\n        onKeyDown(event);\n      }\n    };\n    /**\n     * Only update the value which is not in props\n     */\n\n\n    _this.setUncontrolledState = function (state) {\n      var atomic = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var forceState = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      var needSync = false;\n      var allPassed = true;\n      var newState = {};\n      Object.keys(state).forEach(function (name) {\n        if (name in _this.props) {\n          allPassed = false;\n          return;\n        }\n\n        needSync = true;\n        newState[name] = state[name];\n      });\n\n      if (needSync && (!atomic || allPassed)) {\n        _this.setState(_objectSpread(_objectSpread({}, newState), forceState));\n      }\n    };\n\n    _this.scrollTo = function (scroll) {\n      _this.listRef.current.scrollTo(scroll);\n    };\n\n    return _this;\n  }\n\n  _createClass(Tree, [{\n    key: \"render\",\n    value: function render() {\n      var _classNames;\n\n      var _this$state10 = this.state,\n          focused = _this$state10.focused,\n          flattenNodes = _this$state10.flattenNodes,\n          keyEntities = _this$state10.keyEntities,\n          dragging = _this$state10.dragging,\n          activeKey = _this$state10.activeKey;\n      var _this$props6 = this.props,\n          prefixCls = _this$props6.prefixCls,\n          className = _this$props6.className,\n          style = _this$props6.style,\n          showLine = _this$props6.showLine,\n          focusable = _this$props6.focusable,\n          _this$props6$tabIndex = _this$props6.tabIndex,\n          tabIndex = _this$props6$tabIndex === void 0 ? 0 : _this$props6$tabIndex,\n          selectable = _this$props6.selectable,\n          showIcon = _this$props6.showIcon,\n          icon = _this$props6.icon,\n          switcherIcon = _this$props6.switcherIcon,\n          draggable = _this$props6.draggable,\n          checkable = _this$props6.checkable,\n          checkStrictly = _this$props6.checkStrictly,\n          disabled = _this$props6.disabled,\n          motion = _this$props6.motion,\n          loadData = _this$props6.loadData,\n          filterTreeNode = _this$props6.filterTreeNode,\n          height = _this$props6.height,\n          itemHeight = _this$props6.itemHeight,\n          virtual = _this$props6.virtual,\n          titleRender = _this$props6.titleRender;\n      var domProps = getDataAndAria(this.props);\n      return React.createElement(TreeContext.Provider, {\n        value: {\n          prefixCls: prefixCls,\n          selectable: selectable,\n          showIcon: showIcon,\n          icon: icon,\n          switcherIcon: switcherIcon,\n          draggable: draggable,\n          checkable: checkable,\n          checkStrictly: checkStrictly,\n          disabled: disabled,\n          keyEntities: keyEntities,\n          loadData: loadData,\n          filterTreeNode: filterTreeNode,\n          titleRender: titleRender,\n          onNodeClick: this.onNodeClick,\n          onNodeDoubleClick: this.onNodeDoubleClick,\n          onNodeExpand: this.onNodeExpand,\n          onNodeSelect: this.onNodeSelect,\n          onNodeCheck: this.onNodeCheck,\n          onNodeLoad: this.onNodeLoad,\n          onNodeMouseEnter: this.onNodeMouseEnter,\n          onNodeMouseLeave: this.onNodeMouseLeave,\n          onNodeContextMenu: this.onNodeContextMenu,\n          onNodeDragStart: this.onNodeDragStart,\n          onNodeDragEnter: this.onNodeDragEnter,\n          onNodeDragOver: this.onNodeDragOver,\n          onNodeDragLeave: this.onNodeDragLeave,\n          onNodeDragEnd: this.onNodeDragEnd,\n          onNodeDrop: this.onNodeDrop\n        }\n      }, React.createElement(\"div\", {\n        className: classNames(prefixCls, className, (_classNames = {}, _defineProperty(_classNames, \"\".concat(prefixCls, \"-show-line\"), showLine), _defineProperty(_classNames, \"\".concat(prefixCls, \"-focused\"), focused), _defineProperty(_classNames, \"\".concat(prefixCls, \"-active-focused\"), activeKey !== null), _classNames))\n      }, React.createElement(NodeList, Object.assign({\n        ref: this.listRef,\n        prefixCls: prefixCls,\n        style: style,\n        data: flattenNodes,\n        disabled: disabled,\n        selectable: selectable,\n        checkable: !!checkable,\n        motion: motion,\n        dragging: dragging,\n        height: height,\n        itemHeight: itemHeight,\n        virtual: virtual,\n        focusable: focusable,\n        focused: focused,\n        tabIndex: tabIndex,\n        activeItem: this.getActiveItem(),\n        onFocus: this.onFocus,\n        onBlur: this.onBlur,\n        onKeyDown: this.onKeyDown,\n        onActiveChange: this.onActiveChange,\n        onListChangeStart: this.onListChangeStart,\n        onListChangeEnd: this.onListChangeEnd\n      }, this.getTreeNodeRequiredProps(), domProps))));\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(props, prevState) {\n      var prevProps = prevState.prevProps;\n      var newState = {\n        prevProps: props\n      };\n\n      function needSync(name) {\n        return !prevProps && name in props || prevProps && prevProps[name] !== props[name];\n      } // ================== Tree Node ==================\n\n\n      var treeData; // Check if `treeData` or `children` changed and save into the state.\n\n      if (needSync('treeData')) {\n        treeData = props.treeData;\n      } else if (needSync('children')) {\n        warning(false, '`children` of Tree is deprecated. Please use `treeData` instead.');\n        treeData = convertTreeToData(props.children);\n      } // Save flatten nodes info and convert `treeData` into keyEntities\n\n\n      if (treeData) {\n        newState.treeData = treeData;\n        var entitiesMap = convertDataToEntities(treeData);\n        newState.keyEntities = _objectSpread(_defineProperty({}, MOTION_KEY, MotionEntity), entitiesMap.keyEntities); // Warning if treeNode not provide key\n\n        if (process.env.NODE_ENV !== 'production') {\n          warningWithoutKey(treeData);\n        }\n      }\n\n      var keyEntities = newState.keyEntities || prevState.keyEntities; // ================ expandedKeys =================\n\n      if (needSync('expandedKeys') || prevProps && needSync('autoExpandParent')) {\n        newState.expandedKeys = props.autoExpandParent || !prevProps && props.defaultExpandParent ? conductExpandParent(props.expandedKeys, keyEntities) : props.expandedKeys;\n      } else if (!prevProps && props.defaultExpandAll) {\n        var cloneKeyEntities = _objectSpread({}, keyEntities);\n\n        delete cloneKeyEntities[MOTION_KEY];\n        newState.expandedKeys = Object.keys(cloneKeyEntities).map(function (key) {\n          return cloneKeyEntities[key].key;\n        });\n      } else if (!prevProps && props.defaultExpandedKeys) {\n        newState.expandedKeys = props.autoExpandParent || props.defaultExpandParent ? conductExpandParent(props.defaultExpandedKeys, keyEntities) : props.defaultExpandedKeys;\n      }\n\n      if (!newState.expandedKeys) {\n        delete newState.expandedKeys;\n      } // ================ flattenNodes =================\n\n\n      if (treeData || newState.expandedKeys) {\n        var flattenNodes = flattenTreeData(treeData || prevState.treeData, newState.expandedKeys || prevState.expandedKeys);\n        newState.flattenNodes = flattenNodes;\n      } // ================ selectedKeys =================\n\n\n      if (props.selectable) {\n        if (needSync('selectedKeys')) {\n          newState.selectedKeys = calcSelectedKeys(props.selectedKeys, props);\n        } else if (!prevProps && props.defaultSelectedKeys) {\n          newState.selectedKeys = calcSelectedKeys(props.defaultSelectedKeys, props);\n        }\n      } // ================= checkedKeys =================\n\n\n      if (props.checkable) {\n        var checkedKeyEntity;\n\n        if (needSync('checkedKeys')) {\n          checkedKeyEntity = parseCheckedKeys(props.checkedKeys) || {};\n        } else if (!prevProps && props.defaultCheckedKeys) {\n          checkedKeyEntity = parseCheckedKeys(props.defaultCheckedKeys) || {};\n        } else if (treeData) {\n          // If `treeData` changed, we also need check it\n          checkedKeyEntity = parseCheckedKeys(props.checkedKeys) || {\n            checkedKeys: prevState.checkedKeys,\n            halfCheckedKeys: prevState.halfCheckedKeys\n          };\n        }\n\n        if (checkedKeyEntity) {\n          var _checkedKeyEntity = checkedKeyEntity,\n              _checkedKeyEntity$che = _checkedKeyEntity.checkedKeys,\n              checkedKeys = _checkedKeyEntity$che === void 0 ? [] : _checkedKeyEntity$che,\n              _checkedKeyEntity$hal = _checkedKeyEntity.halfCheckedKeys,\n              halfCheckedKeys = _checkedKeyEntity$hal === void 0 ? [] : _checkedKeyEntity$hal;\n\n          if (!props.checkStrictly) {\n            var conductKeys = conductCheck(checkedKeys, true, keyEntities);\n            checkedKeys = conductKeys.checkedKeys;\n            halfCheckedKeys = conductKeys.halfCheckedKeys;\n          }\n\n          newState.checkedKeys = checkedKeys;\n          newState.halfCheckedKeys = halfCheckedKeys;\n        }\n      } // ================= loadedKeys ==================\n\n\n      if (needSync('loadedKeys')) {\n        newState.loadedKeys = props.loadedKeys;\n      }\n\n      return newState;\n    }\n  }]);\n\n  return Tree;\n}(React.Component);\n\nTree.defaultProps = {\n  prefixCls: 'rc-tree',\n  showLine: false,\n  showIcon: true,\n  selectable: true,\n  multiple: false,\n  checkable: false,\n  disabled: false,\n  checkStrictly: false,\n  draggable: false,\n  defaultExpandParent: true,\n  autoExpandParent: false,\n  defaultExpandAll: false,\n  defaultExpandedKeys: [],\n  defaultCheckedKeys: [],\n  defaultSelectedKeys: []\n};\nTree.TreeNode = TreeNode;\nexport default Tree;","map":{"version":3,"sources":["/Users/wangbing/Desktop/cz/node_modules/rc-tree/es/Tree.js"],"names":["_defineProperty","_objectSpread","_toConsumableArray","_classCallCheck","_createClass","_inherits","_createSuper","React","KeyCode","warning","classNames","TreeContext","getDataAndAria","getDragNodesKeys","parseCheckedKeys","conductExpandParent","calcSelectedKeys","calcDropPosition","arrAdd","arrDel","posToArr","flattenTreeData","convertTreeToData","convertDataToEntities","warningWithoutKey","convertNodePropsToEventData","getTreeNodeProps","NodeList","MOTION_KEY","MotionEntity","TreeNode","conductCheck","Tree","_React$Component","_super","_this","apply","arguments","state","keyEntities","selectedKeys","checkedKeys","halfCheckedKeys","loadedKeys","loadingKeys","expandedKeys","dragging","dragNodesKeys","dragOverNodeKey","dropPosition","treeData","flattenNodes","focused","activeKey","listChanging","prevProps","listRef","createRef","onNodeDragStart","event","node","_this$state","onDragStart","props","eventKey","dragNode","newExpandedKeys","setState","setExpandedKeys","onNodeDragEnter","_this$state2","onDragEnter","_node$props","pos","indexOf","setTimeout","delayedDragEnterLogic","Object","keys","forEach","key","clearTimeout","window","entity","children","length","onNodeDragOver","onDragOver","onNodeDragLeave","onDragLeave","onNodeDragEnd","onDragEnd","cleanDragState","onNodeDrop","_this$state3","_this$state3$dragNode","onDrop","_node$props2","posArr","dropResult","slice","Number","dropToGap","onNodeClick","e","treeNode","onClick","onNodeDoubleClick","onDoubleClick","onNodeSelect","_this$props","onSelect","multiple","selected","targetSelected","selectedNodes","map","selectedKey","filter","setUncontrolledState","nativeEvent","onNodeCheck","checked","_this$state4","oriCheckedKeys","oriHalfCheckedKeys","_this$props2","checkStrictly","onCheck","checkedObj","eventObj","halfChecked","checkedNodes","checkedKey","_conductCheck","concat","_checkedKeys","_halfCheckedKeys","keySet","Set","delete","_conductCheck2","Array","from","checkedNodesPositions","push","onNodeLoad","Promise","resolve","_ref","_ref$loadedKeys","_ref$loadingKeys","_this$props3","loadData","onLoad","promise","then","_this$state5","currentLoadedKeys","currentLoadingKeys","newLoadedKeys","newLoadingKeys","onNodeMouseEnter","onMouseEnter","onNodeMouseLeave","onMouseLeave","onNodeContextMenu","onRightClick","preventDefault","onFocus","onBlur","onActiveChange","getTreeNodeRequiredProps","_this$state6","onNodeExpand","_this$props4","onExpand","expanded","index","targetExpanded","loadPromise","newFlattenTreeData","onListChangeStart","onListChangeEnd","newActiveKey","scrollTo","getActiveItem","_this$state7","find","_ref2","data","offsetActiveKey","offset","_this$state8","findIndex","_ref3","item","onKeyDown","_this$state9","_this$props5","checkable","selectable","which","UP","DOWN","activeItem","treeNodeRequiredProps","expandable","isLeaf","eventNode","active","LEFT","includes","parent","RIGHT","ENTER","SPACE","disabled","disableCheckbox","atomic","undefined","forceState","needSync","allPassed","newState","name","scroll","current","value","render","_classNames","_this$state10","_this$props6","prefixCls","className","style","showLine","focusable","_this$props6$tabIndex","tabIndex","showIcon","icon","switcherIcon","draggable","motion","filterTreeNode","height","itemHeight","virtual","titleRender","domProps","createElement","Provider","assign","ref","getDerivedStateFromProps","prevState","entitiesMap","process","env","NODE_ENV","autoExpandParent","defaultExpandParent","defaultExpandAll","cloneKeyEntities","defaultExpandedKeys","defaultSelectedKeys","checkedKeyEntity","defaultCheckedKeys","_checkedKeyEntity","_checkedKeyEntity$che","_checkedKeyEntity$hal","conductKeys","Component","defaultProps"],"mappings":"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","sourcesContent":["import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"@babel/runtime/helpers/esm/createSuper\";\n// TODO: https://www.w3.org/TR/2017/NOTE-wai-aria-practices-1.1-20171214/examples/treeview/treeview-2/treeview-2a.html\n// Fully accessibility support\nimport * as React from 'react';\nimport KeyCode from \"rc-util/es/KeyCode\";\nimport warning from \"rc-util/es/warning\";\nimport classNames from 'classnames';\nimport { TreeContext } from './contextTypes';\nimport { getDataAndAria, getDragNodesKeys, parseCheckedKeys, conductExpandParent, calcSelectedKeys, calcDropPosition, arrAdd, arrDel, posToArr } from './util';\nimport { flattenTreeData, convertTreeToData, convertDataToEntities, warningWithoutKey, convertNodePropsToEventData, getTreeNodeProps } from './utils/treeUtil';\nimport NodeList, { MOTION_KEY, MotionEntity } from './NodeList';\nimport TreeNode from './TreeNode';\nimport { conductCheck } from './utils/conductUtil';\n\nvar Tree = /*#__PURE__*/function (_React$Component) {\n  _inherits(Tree, _React$Component);\n\n  var _super = _createSuper(Tree);\n\n  function Tree() {\n    var _this;\n\n    _classCallCheck(this, Tree);\n\n    _this = _super.apply(this, arguments);\n    _this.state = {\n      keyEntities: {},\n      selectedKeys: [],\n      checkedKeys: [],\n      halfCheckedKeys: [],\n      loadedKeys: [],\n      loadingKeys: [],\n      expandedKeys: [],\n      dragging: false,\n      dragNodesKeys: [],\n      dragOverNodeKey: null,\n      dropPosition: null,\n      treeData: [],\n      flattenNodes: [],\n      focused: false,\n      activeKey: null,\n      listChanging: false,\n      prevProps: null\n    };\n    _this.listRef = React.createRef();\n\n    _this.onNodeDragStart = function (event, node) {\n      var _this$state = _this.state,\n          expandedKeys = _this$state.expandedKeys,\n          keyEntities = _this$state.keyEntities;\n      var onDragStart = _this.props.onDragStart;\n      var eventKey = node.props.eventKey;\n      _this.dragNode = node;\n      var newExpandedKeys = arrDel(expandedKeys, eventKey);\n\n      _this.setState({\n        dragging: true,\n        dragNodesKeys: getDragNodesKeys(eventKey, keyEntities)\n      });\n\n      _this.setExpandedKeys(newExpandedKeys);\n\n      if (onDragStart) {\n        onDragStart({\n          event: event,\n          node: convertNodePropsToEventData(node.props)\n        });\n      }\n    };\n    /**\n     * [Legacy] Select handler is less small than node,\n     * so that this will trigger when drag enter node or select handler.\n     * This is a little tricky if customize css without padding.\n     * Better for use mouse move event to refresh drag state.\n     * But let's just keep it to avoid event trigger logic change.\n     */\n\n\n    _this.onNodeDragEnter = function (event, node) {\n      var _this$state2 = _this.state,\n          expandedKeys = _this$state2.expandedKeys,\n          keyEntities = _this$state2.keyEntities,\n          dragNodesKeys = _this$state2.dragNodesKeys;\n      var onDragEnter = _this.props.onDragEnter;\n      var _node$props = node.props,\n          pos = _node$props.pos,\n          eventKey = _node$props.eventKey;\n      if (!_this.dragNode || dragNodesKeys.indexOf(eventKey) !== -1) return;\n      var dropPosition = calcDropPosition(event, node); // Skip if drag node is self\n\n      if (_this.dragNode.props.eventKey === eventKey && dropPosition === 0) {\n        _this.setState({\n          dragOverNodeKey: '',\n          dropPosition: null\n        });\n\n        return;\n      } // Ref: https://github.com/react-component/tree/issues/132\n      // Add timeout to let onDragLevel fire before onDragEnter,\n      // so that we can clean drag props for onDragLeave node.\n      // Macro task for this:\n      // https://html.spec.whatwg.org/multipage/webappapis.html#clean-up-after-running-script\n\n\n      setTimeout(function () {\n        // Update drag over node\n        _this.setState({\n          dragOverNodeKey: eventKey,\n          dropPosition: dropPosition\n        }); // Side effect for delay drag\n\n\n        if (!_this.delayedDragEnterLogic) {\n          _this.delayedDragEnterLogic = {};\n        }\n\n        Object.keys(_this.delayedDragEnterLogic).forEach(function (key) {\n          clearTimeout(_this.delayedDragEnterLogic[key]);\n        });\n        _this.delayedDragEnterLogic[pos] = window.setTimeout(function () {\n          if (!_this.state.dragging) return;\n\n          var newExpandedKeys = _toConsumableArray(expandedKeys);\n\n          var entity = keyEntities[eventKey];\n\n          if (entity && (entity.children || []).length) {\n            newExpandedKeys = arrAdd(expandedKeys, eventKey);\n          }\n\n          if (!('expandedKeys' in _this.props)) {\n            _this.setExpandedKeys(newExpandedKeys);\n          }\n\n          if (onDragEnter) {\n            onDragEnter({\n              event: event,\n              node: convertNodePropsToEventData(node.props),\n              expandedKeys: newExpandedKeys\n            });\n          }\n        }, 400);\n      }, 0);\n    };\n\n    _this.onNodeDragOver = function (event, node) {\n      var dragNodesKeys = _this.state.dragNodesKeys;\n      var onDragOver = _this.props.onDragOver;\n      var eventKey = node.props.eventKey;\n\n      if (dragNodesKeys.indexOf(eventKey) !== -1) {\n        return;\n      } // Update drag position\n\n\n      if (_this.dragNode && eventKey === _this.state.dragOverNodeKey) {\n        var dropPosition = calcDropPosition(event, node);\n        if (dropPosition === _this.state.dropPosition) return;\n\n        _this.setState({\n          dropPosition: dropPosition\n        });\n      }\n\n      if (onDragOver) {\n        onDragOver({\n          event: event,\n          node: convertNodePropsToEventData(node.props)\n        });\n      }\n    };\n\n    _this.onNodeDragLeave = function (event, node) {\n      var onDragLeave = _this.props.onDragLeave;\n\n      _this.setState({\n        dragOverNodeKey: ''\n      });\n\n      if (onDragLeave) {\n        onDragLeave({\n          event: event,\n          node: convertNodePropsToEventData(node.props)\n        });\n      }\n    };\n\n    _this.onNodeDragEnd = function (event, node) {\n      var onDragEnd = _this.props.onDragEnd;\n\n      _this.setState({\n        dragOverNodeKey: ''\n      });\n\n      _this.cleanDragState();\n\n      if (onDragEnd) {\n        onDragEnd({\n          event: event,\n          node: convertNodePropsToEventData(node.props)\n        });\n      }\n\n      _this.dragNode = null;\n    };\n\n    _this.onNodeDrop = function (event, node) {\n      var _this$state3 = _this.state,\n          _this$state3$dragNode = _this$state3.dragNodesKeys,\n          dragNodesKeys = _this$state3$dragNode === void 0 ? [] : _this$state3$dragNode,\n          dropPosition = _this$state3.dropPosition;\n      var onDrop = _this.props.onDrop;\n      var _node$props2 = node.props,\n          eventKey = _node$props2.eventKey,\n          pos = _node$props2.pos;\n\n      _this.setState({\n        dragOverNodeKey: ''\n      });\n\n      _this.cleanDragState();\n\n      if (dragNodesKeys.indexOf(eventKey) !== -1) {\n        warning(false, \"Can not drop to dragNode(include it's children node)\");\n        return;\n      }\n\n      var posArr = posToArr(pos);\n      var dropResult = {\n        event: event,\n        node: convertNodePropsToEventData(node.props),\n        dragNode: _this.dragNode ? convertNodePropsToEventData(_this.dragNode.props) : null,\n        dragNodesKeys: dragNodesKeys.slice(),\n        dropPosition: dropPosition + Number(posArr[posArr.length - 1]),\n        dropToGap: false\n      };\n\n      if (dropPosition !== 0) {\n        dropResult.dropToGap = true;\n      }\n\n      if (onDrop) {\n        onDrop(dropResult);\n      }\n\n      _this.dragNode = null;\n    };\n\n    _this.cleanDragState = function () {\n      var dragging = _this.state.dragging;\n\n      if (dragging) {\n        _this.setState({\n          dragging: false\n        });\n      }\n    };\n\n    _this.onNodeClick = function (e, treeNode) {\n      var onClick = _this.props.onClick;\n\n      if (onClick) {\n        onClick(e, treeNode);\n      }\n    };\n\n    _this.onNodeDoubleClick = function (e, treeNode) {\n      var onDoubleClick = _this.props.onDoubleClick;\n\n      if (onDoubleClick) {\n        onDoubleClick(e, treeNode);\n      }\n    };\n\n    _this.onNodeSelect = function (e, treeNode) {\n      var selectedKeys = _this.state.selectedKeys;\n      var keyEntities = _this.state.keyEntities;\n      var _this$props = _this.props,\n          onSelect = _this$props.onSelect,\n          multiple = _this$props.multiple;\n      var selected = treeNode.selected,\n          key = treeNode.key;\n      var targetSelected = !selected; // Update selected keys\n\n      if (!targetSelected) {\n        selectedKeys = arrDel(selectedKeys, key);\n      } else if (!multiple) {\n        selectedKeys = [key];\n      } else {\n        selectedKeys = arrAdd(selectedKeys, key);\n      } // [Legacy] Not found related usage in doc or upper libs\n\n\n      var selectedNodes = selectedKeys.map(function (selectedKey) {\n        var entity = keyEntities[selectedKey];\n        if (!entity) return null;\n        return entity.node;\n      }).filter(function (node) {\n        return node;\n      });\n\n      _this.setUncontrolledState({\n        selectedKeys: selectedKeys\n      });\n\n      if (onSelect) {\n        onSelect(selectedKeys, {\n          event: 'select',\n          selected: targetSelected,\n          node: treeNode,\n          selectedNodes: selectedNodes,\n          nativeEvent: e.nativeEvent\n        });\n      }\n    };\n\n    _this.onNodeCheck = function (e, treeNode, checked) {\n      var _this$state4 = _this.state,\n          keyEntities = _this$state4.keyEntities,\n          oriCheckedKeys = _this$state4.checkedKeys,\n          oriHalfCheckedKeys = _this$state4.halfCheckedKeys;\n      var _this$props2 = _this.props,\n          checkStrictly = _this$props2.checkStrictly,\n          onCheck = _this$props2.onCheck;\n      var key = treeNode.key; // Prepare trigger arguments\n\n      var checkedObj;\n      var eventObj = {\n        event: 'check',\n        node: treeNode,\n        checked: checked,\n        nativeEvent: e.nativeEvent\n      };\n\n      if (checkStrictly) {\n        var checkedKeys = checked ? arrAdd(oriCheckedKeys, key) : arrDel(oriCheckedKeys, key);\n        var halfCheckedKeys = arrDel(oriHalfCheckedKeys, key);\n        checkedObj = {\n          checked: checkedKeys,\n          halfChecked: halfCheckedKeys\n        };\n        eventObj.checkedNodes = checkedKeys.map(function (checkedKey) {\n          return keyEntities[checkedKey];\n        }).filter(function (entity) {\n          return entity;\n        }).map(function (entity) {\n          return entity.node;\n        });\n\n        _this.setUncontrolledState({\n          checkedKeys: checkedKeys\n        });\n      } else {\n        // Always fill first\n        var _conductCheck = conductCheck([].concat(_toConsumableArray(oriCheckedKeys), [key]), true, keyEntities),\n            _checkedKeys = _conductCheck.checkedKeys,\n            _halfCheckedKeys = _conductCheck.halfCheckedKeys; // If remove, we do it again to correction\n\n\n        if (!checked) {\n          var keySet = new Set(_checkedKeys);\n          keySet.delete(key);\n\n          var _conductCheck2 = conductCheck(Array.from(keySet), {\n            checked: false,\n            halfCheckedKeys: _halfCheckedKeys\n          }, keyEntities);\n\n          _checkedKeys = _conductCheck2.checkedKeys;\n          _halfCheckedKeys = _conductCheck2.halfCheckedKeys;\n        }\n\n        checkedObj = _checkedKeys; // [Legacy] This is used for `rc-tree-select`\n\n        eventObj.checkedNodes = [];\n        eventObj.checkedNodesPositions = [];\n        eventObj.halfCheckedKeys = _halfCheckedKeys;\n\n        _checkedKeys.forEach(function (checkedKey) {\n          var entity = keyEntities[checkedKey];\n          if (!entity) return;\n          var node = entity.node,\n              pos = entity.pos;\n          eventObj.checkedNodes.push(node);\n          eventObj.checkedNodesPositions.push({\n            node: node,\n            pos: pos\n          });\n        });\n\n        _this.setUncontrolledState({\n          checkedKeys: _checkedKeys\n        }, false, {\n          halfCheckedKeys: _halfCheckedKeys\n        });\n      }\n\n      if (onCheck) {\n        onCheck(checkedObj, eventObj);\n      }\n    };\n\n    _this.onNodeLoad = function (treeNode) {\n      return new Promise(function (resolve) {\n        // We need to get the latest state of loading/loaded keys\n        _this.setState(function (_ref) {\n          var _ref$loadedKeys = _ref.loadedKeys,\n              loadedKeys = _ref$loadedKeys === void 0 ? [] : _ref$loadedKeys,\n              _ref$loadingKeys = _ref.loadingKeys,\n              loadingKeys = _ref$loadingKeys === void 0 ? [] : _ref$loadingKeys;\n          var _this$props3 = _this.props,\n              loadData = _this$props3.loadData,\n              onLoad = _this$props3.onLoad;\n          var key = treeNode.key;\n\n          if (!loadData || loadedKeys.indexOf(key) !== -1 || loadingKeys.indexOf(key) !== -1) {\n            // react 15 will warn if return null\n            return {};\n          } // Process load data\n\n\n          var promise = loadData(treeNode);\n          promise.then(function () {\n            var _this$state5 = _this.state,\n                currentLoadedKeys = _this$state5.loadedKeys,\n                currentLoadingKeys = _this$state5.loadingKeys;\n            var newLoadedKeys = arrAdd(currentLoadedKeys, key);\n            var newLoadingKeys = arrDel(currentLoadingKeys, key); // onLoad should trigger before internal setState to avoid `loadData` trigger twice.\n            // https://github.com/ant-design/ant-design/issues/12464\n\n            if (onLoad) {\n              onLoad(newLoadedKeys, {\n                event: 'load',\n                node: treeNode\n              });\n            }\n\n            _this.setUncontrolledState({\n              loadedKeys: newLoadedKeys\n            });\n\n            _this.setState({\n              loadingKeys: newLoadingKeys\n            });\n\n            resolve();\n          });\n          return {\n            loadingKeys: arrAdd(loadingKeys, key)\n          };\n        });\n      });\n    };\n\n    _this.onNodeMouseEnter = function (event, node) {\n      var onMouseEnter = _this.props.onMouseEnter;\n\n      if (onMouseEnter) {\n        onMouseEnter({\n          event: event,\n          node: node\n        });\n      }\n    };\n\n    _this.onNodeMouseLeave = function (event, node) {\n      var onMouseLeave = _this.props.onMouseLeave;\n\n      if (onMouseLeave) {\n        onMouseLeave({\n          event: event,\n          node: node\n        });\n      }\n    };\n\n    _this.onNodeContextMenu = function (event, node) {\n      var onRightClick = _this.props.onRightClick;\n\n      if (onRightClick) {\n        event.preventDefault();\n        onRightClick({\n          event: event,\n          node: node\n        });\n      }\n    };\n\n    _this.onFocus = function () {\n      var onFocus = _this.props.onFocus;\n\n      _this.setState({\n        focused: true\n      });\n\n      if (onFocus) {\n        onFocus.apply(void 0, arguments);\n      }\n    };\n\n    _this.onBlur = function () {\n      var onBlur = _this.props.onBlur;\n\n      _this.setState({\n        focused: false\n      });\n\n      _this.onActiveChange(null);\n\n      if (onBlur) {\n        onBlur.apply(void 0, arguments);\n      }\n    };\n\n    _this.getTreeNodeRequiredProps = function () {\n      var _this$state6 = _this.state,\n          expandedKeys = _this$state6.expandedKeys,\n          selectedKeys = _this$state6.selectedKeys,\n          loadedKeys = _this$state6.loadedKeys,\n          loadingKeys = _this$state6.loadingKeys,\n          checkedKeys = _this$state6.checkedKeys,\n          halfCheckedKeys = _this$state6.halfCheckedKeys,\n          dragOverNodeKey = _this$state6.dragOverNodeKey,\n          dropPosition = _this$state6.dropPosition,\n          keyEntities = _this$state6.keyEntities;\n      return {\n        expandedKeys: expandedKeys || [],\n        selectedKeys: selectedKeys || [],\n        loadedKeys: loadedKeys || [],\n        loadingKeys: loadingKeys || [],\n        checkedKeys: checkedKeys || [],\n        halfCheckedKeys: halfCheckedKeys || [],\n        dragOverNodeKey: dragOverNodeKey,\n        dropPosition: dropPosition,\n        keyEntities: keyEntities\n      };\n    }; // =========================== Expanded ===========================\n\n    /** Set uncontrolled `expandedKeys`. This will also auto update `flattenNodes`. */\n\n\n    _this.setExpandedKeys = function (expandedKeys) {\n      var treeData = _this.state.treeData;\n      var flattenNodes = flattenTreeData(treeData, expandedKeys);\n\n      _this.setUncontrolledState({\n        expandedKeys: expandedKeys,\n        flattenNodes: flattenNodes\n      }, true);\n    };\n\n    _this.onNodeExpand = function (e, treeNode) {\n      var expandedKeys = _this.state.expandedKeys;\n      var listChanging = _this.state.listChanging;\n      var _this$props4 = _this.props,\n          onExpand = _this$props4.onExpand,\n          loadData = _this$props4.loadData;\n      var key = treeNode.key,\n          expanded = treeNode.expanded; // Do nothing when motion is in progress\n\n      if (listChanging) {\n        return;\n      } // Update selected keys\n\n\n      var index = expandedKeys.indexOf(key);\n      var targetExpanded = !expanded;\n      warning(expanded && index !== -1 || !expanded && index === -1, 'Expand state not sync with index check');\n\n      if (targetExpanded) {\n        expandedKeys = arrAdd(expandedKeys, key);\n      } else {\n        expandedKeys = arrDel(expandedKeys, key);\n      }\n\n      _this.setExpandedKeys(expandedKeys);\n\n      if (onExpand) {\n        onExpand(expandedKeys, {\n          node: treeNode,\n          expanded: targetExpanded,\n          nativeEvent: e.nativeEvent\n        });\n      } // Async Load data\n\n\n      if (targetExpanded && loadData) {\n        var loadPromise = _this.onNodeLoad(treeNode);\n\n        if (loadPromise) {\n          loadPromise.then(function () {\n            // [Legacy] Refresh logic\n            var newFlattenTreeData = flattenTreeData(_this.state.treeData, expandedKeys);\n\n            _this.setUncontrolledState({\n              flattenNodes: newFlattenTreeData\n            });\n          });\n        }\n      }\n    };\n\n    _this.onListChangeStart = function () {\n      _this.setUncontrolledState({\n        listChanging: true\n      });\n    };\n\n    _this.onListChangeEnd = function () {\n      setTimeout(function () {\n        _this.setUncontrolledState({\n          listChanging: false\n        });\n      });\n    }; // =========================== Keyboard ===========================\n\n\n    _this.onActiveChange = function (newActiveKey) {\n      var activeKey = _this.state.activeKey;\n      var onActiveChange = _this.props.onActiveChange;\n\n      if (activeKey === newActiveKey) {\n        return;\n      }\n\n      _this.setState({\n        activeKey: newActiveKey\n      });\n\n      if (newActiveKey !== null) {\n        _this.scrollTo({\n          key: newActiveKey\n        });\n      }\n\n      if (onActiveChange) {\n        onActiveChange(newActiveKey);\n      }\n    };\n\n    _this.getActiveItem = function () {\n      var _this$state7 = _this.state,\n          activeKey = _this$state7.activeKey,\n          flattenNodes = _this$state7.flattenNodes;\n\n      if (activeKey === null) {\n        return null;\n      }\n\n      return flattenNodes.find(function (_ref2) {\n        var key = _ref2.data.key;\n        return key === activeKey;\n      }) || null;\n    };\n\n    _this.offsetActiveKey = function (offset) {\n      var _this$state8 = _this.state,\n          flattenNodes = _this$state8.flattenNodes,\n          activeKey = _this$state8.activeKey;\n      var index = flattenNodes.findIndex(function (_ref3) {\n        var key = _ref3.data.key;\n        return key === activeKey;\n      }); // Align with index\n\n      if (index === -1 && offset < 0) {\n        index = flattenNodes.length;\n      }\n\n      index = (index + offset + flattenNodes.length) % flattenNodes.length;\n      var item = flattenNodes[index];\n\n      if (item) {\n        var key = item.data.key;\n\n        _this.onActiveChange(key);\n      } else {\n        _this.onActiveChange(null);\n      }\n    };\n\n    _this.onKeyDown = function (event) {\n      var _this$state9 = _this.state,\n          activeKey = _this$state9.activeKey,\n          expandedKeys = _this$state9.expandedKeys,\n          checkedKeys = _this$state9.checkedKeys;\n      var _this$props5 = _this.props,\n          onKeyDown = _this$props5.onKeyDown,\n          checkable = _this$props5.checkable,\n          selectable = _this$props5.selectable; // >>>>>>>>>> Direction\n\n      switch (event.which) {\n        case KeyCode.UP:\n          {\n            _this.offsetActiveKey(-1);\n\n            event.preventDefault();\n            break;\n          }\n\n        case KeyCode.DOWN:\n          {\n            _this.offsetActiveKey(1);\n\n            event.preventDefault();\n            break;\n          }\n      } // >>>>>>>>>> Expand & Selection\n\n\n      var activeItem = _this.getActiveItem();\n\n      if (activeItem && activeItem.data) {\n        var treeNodeRequiredProps = _this.getTreeNodeRequiredProps();\n\n        var expandable = activeItem.data.isLeaf === false || !!(activeItem.data.children || []).length;\n        var eventNode = convertNodePropsToEventData(_objectSpread(_objectSpread({}, getTreeNodeProps(activeKey, treeNodeRequiredProps)), {}, {\n          data: activeItem.data,\n          active: true\n        }));\n\n        switch (event.which) {\n          // >>> Expand\n          case KeyCode.LEFT:\n            {\n              // Collapse if possible\n              if (expandable && expandedKeys.includes(activeKey)) {\n                _this.onNodeExpand({}, eventNode);\n              } else if (activeItem.parent) {\n                _this.onActiveChange(activeItem.parent.data.key);\n              }\n\n              event.preventDefault();\n              break;\n            }\n\n          case KeyCode.RIGHT:\n            {\n              // Expand if possible\n              if (expandable && !expandedKeys.includes(activeKey)) {\n                _this.onNodeExpand({}, eventNode);\n              } else if (activeItem.children && activeItem.children.length) {\n                _this.onActiveChange(activeItem.children[0].data.key);\n              }\n\n              event.preventDefault();\n              break;\n            }\n          // Selection\n\n          case KeyCode.ENTER:\n          case KeyCode.SPACE:\n            {\n              if (checkable && !eventNode.disabled && eventNode.checkable !== false && !eventNode.disableCheckbox) {\n                _this.onNodeCheck({}, eventNode, !checkedKeys.includes(activeKey));\n              } else if (!checkable && selectable && !eventNode.disabled && eventNode.selectable !== false) {\n                _this.onNodeSelect({}, eventNode);\n              }\n\n              break;\n            }\n        }\n      }\n\n      if (onKeyDown) {\n        onKeyDown(event);\n      }\n    };\n    /**\n     * Only update the value which is not in props\n     */\n\n\n    _this.setUncontrolledState = function (state) {\n      var atomic = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var forceState = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      var needSync = false;\n      var allPassed = true;\n      var newState = {};\n      Object.keys(state).forEach(function (name) {\n        if (name in _this.props) {\n          allPassed = false;\n          return;\n        }\n\n        needSync = true;\n        newState[name] = state[name];\n      });\n\n      if (needSync && (!atomic || allPassed)) {\n        _this.setState(_objectSpread(_objectSpread({}, newState), forceState));\n      }\n    };\n\n    _this.scrollTo = function (scroll) {\n      _this.listRef.current.scrollTo(scroll);\n    };\n\n    return _this;\n  }\n\n  _createClass(Tree, [{\n    key: \"render\",\n    value: function render() {\n      var _classNames;\n\n      var _this$state10 = this.state,\n          focused = _this$state10.focused,\n          flattenNodes = _this$state10.flattenNodes,\n          keyEntities = _this$state10.keyEntities,\n          dragging = _this$state10.dragging,\n          activeKey = _this$state10.activeKey;\n      var _this$props6 = this.props,\n          prefixCls = _this$props6.prefixCls,\n          className = _this$props6.className,\n          style = _this$props6.style,\n          showLine = _this$props6.showLine,\n          focusable = _this$props6.focusable,\n          _this$props6$tabIndex = _this$props6.tabIndex,\n          tabIndex = _this$props6$tabIndex === void 0 ? 0 : _this$props6$tabIndex,\n          selectable = _this$props6.selectable,\n          showIcon = _this$props6.showIcon,\n          icon = _this$props6.icon,\n          switcherIcon = _this$props6.switcherIcon,\n          draggable = _this$props6.draggable,\n          checkable = _this$props6.checkable,\n          checkStrictly = _this$props6.checkStrictly,\n          disabled = _this$props6.disabled,\n          motion = _this$props6.motion,\n          loadData = _this$props6.loadData,\n          filterTreeNode = _this$props6.filterTreeNode,\n          height = _this$props6.height,\n          itemHeight = _this$props6.itemHeight,\n          virtual = _this$props6.virtual,\n          titleRender = _this$props6.titleRender;\n      var domProps = getDataAndAria(this.props);\n      return React.createElement(TreeContext.Provider, {\n        value: {\n          prefixCls: prefixCls,\n          selectable: selectable,\n          showIcon: showIcon,\n          icon: icon,\n          switcherIcon: switcherIcon,\n          draggable: draggable,\n          checkable: checkable,\n          checkStrictly: checkStrictly,\n          disabled: disabled,\n          keyEntities: keyEntities,\n          loadData: loadData,\n          filterTreeNode: filterTreeNode,\n          titleRender: titleRender,\n          onNodeClick: this.onNodeClick,\n          onNodeDoubleClick: this.onNodeDoubleClick,\n          onNodeExpand: this.onNodeExpand,\n          onNodeSelect: this.onNodeSelect,\n          onNodeCheck: this.onNodeCheck,\n          onNodeLoad: this.onNodeLoad,\n          onNodeMouseEnter: this.onNodeMouseEnter,\n          onNodeMouseLeave: this.onNodeMouseLeave,\n          onNodeContextMenu: this.onNodeContextMenu,\n          onNodeDragStart: this.onNodeDragStart,\n          onNodeDragEnter: this.onNodeDragEnter,\n          onNodeDragOver: this.onNodeDragOver,\n          onNodeDragLeave: this.onNodeDragLeave,\n          onNodeDragEnd: this.onNodeDragEnd,\n          onNodeDrop: this.onNodeDrop\n        }\n      }, React.createElement(\"div\", {\n        className: classNames(prefixCls, className, (_classNames = {}, _defineProperty(_classNames, \"\".concat(prefixCls, \"-show-line\"), showLine), _defineProperty(_classNames, \"\".concat(prefixCls, \"-focused\"), focused), _defineProperty(_classNames, \"\".concat(prefixCls, \"-active-focused\"), activeKey !== null), _classNames))\n      }, React.createElement(NodeList, Object.assign({\n        ref: this.listRef,\n        prefixCls: prefixCls,\n        style: style,\n        data: flattenNodes,\n        disabled: disabled,\n        selectable: selectable,\n        checkable: !!checkable,\n        motion: motion,\n        dragging: dragging,\n        height: height,\n        itemHeight: itemHeight,\n        virtual: virtual,\n        focusable: focusable,\n        focused: focused,\n        tabIndex: tabIndex,\n        activeItem: this.getActiveItem(),\n        onFocus: this.onFocus,\n        onBlur: this.onBlur,\n        onKeyDown: this.onKeyDown,\n        onActiveChange: this.onActiveChange,\n        onListChangeStart: this.onListChangeStart,\n        onListChangeEnd: this.onListChangeEnd\n      }, this.getTreeNodeRequiredProps(), domProps))));\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(props, prevState) {\n      var prevProps = prevState.prevProps;\n      var newState = {\n        prevProps: props\n      };\n\n      function needSync(name) {\n        return !prevProps && name in props || prevProps && prevProps[name] !== props[name];\n      } // ================== Tree Node ==================\n\n\n      var treeData; // Check if `treeData` or `children` changed and save into the state.\n\n      if (needSync('treeData')) {\n        treeData = props.treeData;\n      } else if (needSync('children')) {\n        warning(false, '`children` of Tree is deprecated. Please use `treeData` instead.');\n        treeData = convertTreeToData(props.children);\n      } // Save flatten nodes info and convert `treeData` into keyEntities\n\n\n      if (treeData) {\n        newState.treeData = treeData;\n        var entitiesMap = convertDataToEntities(treeData);\n        newState.keyEntities = _objectSpread(_defineProperty({}, MOTION_KEY, MotionEntity), entitiesMap.keyEntities); // Warning if treeNode not provide key\n\n        if (process.env.NODE_ENV !== 'production') {\n          warningWithoutKey(treeData);\n        }\n      }\n\n      var keyEntities = newState.keyEntities || prevState.keyEntities; // ================ expandedKeys =================\n\n      if (needSync('expandedKeys') || prevProps && needSync('autoExpandParent')) {\n        newState.expandedKeys = props.autoExpandParent || !prevProps && props.defaultExpandParent ? conductExpandParent(props.expandedKeys, keyEntities) : props.expandedKeys;\n      } else if (!prevProps && props.defaultExpandAll) {\n        var cloneKeyEntities = _objectSpread({}, keyEntities);\n\n        delete cloneKeyEntities[MOTION_KEY];\n        newState.expandedKeys = Object.keys(cloneKeyEntities).map(function (key) {\n          return cloneKeyEntities[key].key;\n        });\n      } else if (!prevProps && props.defaultExpandedKeys) {\n        newState.expandedKeys = props.autoExpandParent || props.defaultExpandParent ? conductExpandParent(props.defaultExpandedKeys, keyEntities) : props.defaultExpandedKeys;\n      }\n\n      if (!newState.expandedKeys) {\n        delete newState.expandedKeys;\n      } // ================ flattenNodes =================\n\n\n      if (treeData || newState.expandedKeys) {\n        var flattenNodes = flattenTreeData(treeData || prevState.treeData, newState.expandedKeys || prevState.expandedKeys);\n        newState.flattenNodes = flattenNodes;\n      } // ================ selectedKeys =================\n\n\n      if (props.selectable) {\n        if (needSync('selectedKeys')) {\n          newState.selectedKeys = calcSelectedKeys(props.selectedKeys, props);\n        } else if (!prevProps && props.defaultSelectedKeys) {\n          newState.selectedKeys = calcSelectedKeys(props.defaultSelectedKeys, props);\n        }\n      } // ================= checkedKeys =================\n\n\n      if (props.checkable) {\n        var checkedKeyEntity;\n\n        if (needSync('checkedKeys')) {\n          checkedKeyEntity = parseCheckedKeys(props.checkedKeys) || {};\n        } else if (!prevProps && props.defaultCheckedKeys) {\n          checkedKeyEntity = parseCheckedKeys(props.defaultCheckedKeys) || {};\n        } else if (treeData) {\n          // If `treeData` changed, we also need check it\n          checkedKeyEntity = parseCheckedKeys(props.checkedKeys) || {\n            checkedKeys: prevState.checkedKeys,\n            halfCheckedKeys: prevState.halfCheckedKeys\n          };\n        }\n\n        if (checkedKeyEntity) {\n          var _checkedKeyEntity = checkedKeyEntity,\n              _checkedKeyEntity$che = _checkedKeyEntity.checkedKeys,\n              checkedKeys = _checkedKeyEntity$che === void 0 ? [] : _checkedKeyEntity$che,\n              _checkedKeyEntity$hal = _checkedKeyEntity.halfCheckedKeys,\n              halfCheckedKeys = _checkedKeyEntity$hal === void 0 ? [] : _checkedKeyEntity$hal;\n\n          if (!props.checkStrictly) {\n            var conductKeys = conductCheck(checkedKeys, true, keyEntities);\n            checkedKeys = conductKeys.checkedKeys;\n            halfCheckedKeys = conductKeys.halfCheckedKeys;\n          }\n\n          newState.checkedKeys = checkedKeys;\n          newState.halfCheckedKeys = halfCheckedKeys;\n        }\n      } // ================= loadedKeys ==================\n\n\n      if (needSync('loadedKeys')) {\n        newState.loadedKeys = props.loadedKeys;\n      }\n\n      return newState;\n    }\n  }]);\n\n  return Tree;\n}(React.Component);\n\nTree.defaultProps = {\n  prefixCls: 'rc-tree',\n  showLine: false,\n  showIcon: true,\n  selectable: true,\n  multiple: false,\n  checkable: false,\n  disabled: false,\n  checkStrictly: false,\n  draggable: false,\n  defaultExpandParent: true,\n  autoExpandParent: false,\n  defaultExpandAll: false,\n  defaultExpandedKeys: [],\n  defaultCheckedKeys: [],\n  defaultSelectedKeys: []\n};\nTree.TreeNode = TreeNode;\nexport default Tree;"]},"metadata":{},"sourceType":"module"}